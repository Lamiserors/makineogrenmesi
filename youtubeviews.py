# -*- coding: utf-8 -*-
"""Untitled10.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1j7jQM7Y4uW6l6MYM7gkJp6gv5-n8tpa-
"""

# Temel kütüphaneler
import numpy as np
import pandas as pd

# Görselleştirme kütüphaneleri
import matplotlib.pyplot as plt
import seaborn as sns

# Veri ön işleme ve model seçimi için
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder

# Modeller
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from xgboost import XGBRegressor
from sklearn.svm import SVR
from sklearn.neighbors import KNeighborsRegressor
from sklearn.metrics import mean_squared_error, r2_score

# Model değerlendirme metrikleri
from sklearn.metrics import mean_squared_error, r2_score, classification_report, accuracy_score

# Dosya yolları
channels_file_path = "C:/Users/Lamiser/youtube_channel_info.csv"
videos_file_path = "C:/Users/Lamiser/youtube_video_info.csv"

# Veri setlerini yükleme
youtube_channel_info_df = pd.read_csv("youtube_channel_info.csv")
youtube_video_info_df = pd.read_csv("youtube_video_info.csv")

print("İlk 5 Satır:")
print(youtube_video_info_df.head())

print("\nVeri Bilgisi:")
print(youtube_video_info_df.info())

#Video Title   ,  Video ID  ,   Published Date bu sütunlari kaldırma
youtube_video_info_df = youtube_video_info_df.drop(columns=["Video Title", "Video ID", "Published Date"])

from sklearn.preprocessing import MinMaxScaler

# MinMaxScaler tanımlama
scaler = MinMaxScaler(feature_range=(0, 1000))

# Views sütununu ölçekleme
youtube_video_info_df['Views'] = scaler.fit_transform(youtube_video_info_df[['Views']]) * 1000

print("\nEksik Veri Kontrolü:")
print(youtube_video_info_df.isnull().sum())

print("\nTemel İstatistikler:")
print(youtube_video_info_df.describe())

plt.figure(figsize=(8, 6))
sns.scatterplot(x="Likes", y="Views", data=youtube_video_info_df)
plt.title("Likes vs Views")
plt.xlabel("Likes")
plt.ylabel("Views")
plt.show()

plt.figure(figsize=(8, 6))
sns.scatterplot(x="Comments", y="Views", data=youtube_video_info_df)
plt.title("Comments vs Views")
plt.xlabel("Comments")
plt.ylabel("Views")
plt.show()

plt.figure(figsize=(8, 6))
sns.scatterplot(x="(Likes + Comments) / Views", y="Views", data=youtube_video_info_df)
plt.title("(Likes + Comments) / Views vs Views")
plt.xlabel("(Likes + Comments) / Views")
plt.ylabel("Views")
plt.show()

plt.figure(figsize=(8, 6))
sns.scatterplot(x="Daily Views", y="Video Age (Days)", data=youtube_video_info_df)
plt.title("Daily Views vs Video Age (Days)")
plt.xlabel("Daily Views")
plt.ylabel("Video Age (Days)")
plt.show()

plt.figure(figsize=(8, 6))
sns.scatterplot(x="Daily Likes", y="Daily Views", data=youtube_video_info_df)
plt.title("Daily Likes vs Daily Views")
plt.xlabel("Daily Likes")
plt.ylabel("Daily Views")
plt.show()

correlation_columns = [
    "Video Age (Days)", "Views", "Likes", "Comments",
    "(Likes + Comments) / Views", "Daily Views", "Daily Likes"
]

# Korelasyon matrisi
correlation_matrix = youtube_video_info_df[correlation_columns].corr()

# Korelasyon grafiği çizimi
plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix, annot=True, cmap="coolwarm", fmt=".2f")
plt.title("Korelasyon Matrisi")
plt.show()

from scipy.stats import f_oneway
import pandas as pd

# Sayısal sütunları seç
numeric_columns = ["Video Age (Days)","Likes", "Comments", "(Likes + Comments) / Views", "Daily Views", "Daily Likes"]

# ANOVA sonuçlarını tutmak için bir liste
anova_results = []

# Her bir sütun için ANOVA testi
for column in numeric_columns:
    f_statistic, p_value = f_oneway(youtube_video_info_df["Views"], youtube_video_info_df[column])
    anova_results.append({"Feature": column, "F-statistic": f_statistic, "P-value": p_value})

# Sonuçları DataFrame olarak göstermek
anova_df = pd.DataFrame(anova_results)

# Sonuçları yazdır
print("ANOVA Testi Sonuçları:")
print(anova_df)

# P-değerine göre değerlendirme
anova_df["Significant"] = anova_df["P-value"] < 0.05
print("\nÖnemli Farklar (P < 0.05):")
print(anova_df[anova_df["Significant"]])

# P-değerine göre küçükten büyüğe sıralama
sorted_anova_df = anova_df.sort_values(by="P-value", ascending=True)

# Sıralı sonuçları yazdırma
print("ANOVA Testi Sonuçları (P-değerine göre küçükten büyüğe sıralı):")
print(sorted_anova_df)

# Görselleştirilecek sütunlar
columns_to_visualize = ["Views", "Likes", "Comments", "Daily Views", "Daily Likes", "(Likes + Comments) / Views"]

# Boxplot çizimi
plt.figure(figsize=(16, 10))  # Görsel boyutu artırıldı
for i, column in enumerate(columns_to_visualize, 1):
    plt.subplot(3, 2, i)  # 3x2 grid içinde grafikleri yerleştir
    sns.boxplot(y=youtube_video_info_df[column])  # Doğru sütun aktarımı
    plt.title(f"Boxplot of {column}", fontsize=12)
    plt.ylabel(column, fontsize=10)

plt.tight_layout()
plt.show()

plt.figure(figsize=(8, 6))
sns.histplot(youtube_video_info_df["Daily Views"], bins=30, kde=True)
plt.title("Daily Views Dağılımı")
plt.xlabel("Daily Views")
plt.ylabel("Frekans")
plt.show()

plt.figure(figsize=(8, 6))
sns.histplot(youtube_video_info_df["Daily Likes"], bins=30, kde=True)
plt.title("Daily Likes Dağılımı")
plt.xlabel("Daily Likes")
plt.ylabel("Frekans")
plt.show()

from scipy.stats import zscore

# Z-skoru hesaplama ve aykırı değerleri filtreleme
filtered_df = youtube_video_info_df[zscore(youtube_video_info_df["Views"]).abs() <= 3]

features = youtube_video_info_df[["Video Age (Days)","Likes", "Comments", "(Likes + Comments) / Views", "Daily Views", "Daily Likes"]]
target = youtube_video_info_df["Views"]

X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.2, random_state=42)

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

print("Linear Regression")
linear_model = LinearRegression()
linear_model.fit(X_train_scaled, y_train)
linear_predictions = linear_model.predict(X_test_scaled)
linear_mse = mean_squared_error(y_test, linear_predictions)
linear_r2 = r2_score(y_test, linear_predictions)
print(f"MSE: {linear_mse}, R²: {linear_r2}\n")

print("Random Forest Regressor")
rf_model = RandomForestRegressor(random_state=42)
rf_model.fit(X_train_scaled, y_train)
rf_predictions = rf_model.predict(X_test_scaled)
rf_mse = mean_squared_error(y_test, rf_predictions)
rf_r2 = r2_score(y_test, rf_predictions)
print(f"MSE: {rf_mse}, R²: {rf_r2}\n")

print("K-Nearest Neighbors Regressor")
knn_model = KNeighborsRegressor()
knn_model.fit(X_train_scaled, y_train)
knn_predictions = knn_model.predict(X_test_scaled)
knn_mse = mean_squared_error(y_test, knn_predictions)
knn_r2 = r2_score(y_test, knn_predictions)
print(f"MSE: {knn_mse}, R²: {knn_r2}\n")

models = {
    "Linear Regression": LinearRegression(),
    "Random Forest Regressor": RandomForestRegressor(random_state=42),
    "KNN Regressor": KNeighborsRegressor()
}

# Modelleri eğitme ve test etme
results = []

for name, model in models.items():
    # Modeli eğit
    model.fit(X_train_scaled, y_train)
    # Tahmin yap
    predictions = model.predict(X_test_scaled)
    # Performans metriklerini hesapla
    mse = mean_squared_error(y_test, predictions)
    r2 = r2_score(y_test, predictions)
    results.append({"Model": name, "MSE": mse, "R²": r2})

# Sonuçları DataFrame'e dönüştürme
results_df = pd.DataFrame(results)

# Grafikleme
x = np.arange(len(results_df))
width = 0.35

# MSE Grafiği
plt.figure(figsize=(10, 6))
plt.bar(x - width/2, results_df["MSE"], width, label="MSE", color="orange")
plt.xticks(x, results_df["Model"], rotation=45)
plt.title("Model Performansı - Mean Squared Error (MSE)")
plt.ylabel("MSE")
plt.xlabel("Model")
plt.legend()
plt.tight_layout()
plt.show()
# R^2 Grafiği
x = np.arange(len(results_df))  # Model sayısı kadar indeks
width = 0.35  # Sütun genişliği

# R² Grafiği
plt.figure(figsize=(10, 6))
plt.bar(x - width/2, results_df["R²"], width, label="R²", color="skyblue")
plt.xticks(x, results_df["Model"], rotation=45)
plt.title("Model Performansı - Determinasyon Katsayısı (R²)", fontsize=16)
plt.ylabel("R² Skoru", fontsize=12)
plt.xlabel("Model", fontsize=12)
plt.ylim(0, 1)  # R² skorunun [0, 1] arasında olduğunu varsayıyoruz
plt.legend()
plt.tight_layout()
plt.show()